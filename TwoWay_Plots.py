import matplotlib.pyplot as plt
import os
import json
from pathlib import Path

# Define units
inch      = 1.0
kip       = 1.0
lb        = kip/1000.0
ft        = 12.0*inch
in_per_ft = inch/ft
ksi       = kip/inch**2
plf       = lb/ft
psf       = lb/ft**2
pcf       = psf/ft
kipft     = kip*ft

# Define members to investigate for each case
titles = dict()
titles['Flat']  = ["Primary Members", "Secondary Members", "Total Load"]
titles['A']     = ["Top Primary Member", "Secondary Members"]
titles['B']     = ["Top Primary Member", "Bottom Primary Member", "Secondary Members"]
titles['C']     = ["Primary Members", "Secondary Member 2"]
titles['D']     = ["Primary Members", "Secondary Member 1"]
titles['E']     = ["Top Primary Member", "Bottom Primary Member", "Secondary Member 1"]
titles['F']     = ["Bottom Primary Member", "Secondary Member 2"]


def two_way_plot(case, Cs_list, Cp_list, zw_over_zh_list):
    '''Read resutls generated by TwoWay_RunAnalysis.py and plot results'''
    
    Bp_results = json.load(open(f'Bp_results_{case}.json'))
    
    color_list = ['tab:blue','tab:orange','tab:green','tab:red']
    
    # Create folder to save figures to if it doesn't exist
    save_folder = Path('figures',f'Two Way Case {case}')
    try:
        os.mkdir(save_folder)
    except FileExistsError:
        pass
    
    for Cs in Cs_list:
        for title in titles[case]:
            fig, ax = plt.subplots(figsize=(3.25,2.75))
            ax.set_position((0.18,0.15,0.77,0.75))
            
            for iCp, Cp in enumerate(Cp_list):
                
                # Plot data from PyPonding analysis
                loop_plot = plt.plot(zw_over_zh_list, Bp_results[str(Cs)][str(Cp)][title], label=f'$C_p$ = {Cp}', color=color_list[iCp])  
                
                # Plot equation
                Bp_coeffs = dict()
                Bp_coeffs['Flat'] = {'Primary Members':       {'Cp_coef': 1.00, 'Cs_coef': 0.85},
                                     'Secondary Members':     {'Cp_coef': 1.15, 'Cs_coef': 1.00},
                                     'Total Load':            {'Cp_coef': 0.85, 'Cs_coef': 0.85}}
                Bp_coeffs['A'] =    {'Secondary Members':     {'Cp_coef': 0.55, 'Cs_coef': 1.00},
                                     'Top Primary Member':    {'Cp_coef': 0.65, 'Cs_coef': 1.15}}
                Bp_coeffs['B'] =    {'Bottom Primary Member': {'Cp_coef': 1.20, 'Cs_coef': 1.10},
                                     'Secondary Members':     {'Cp_coef': 1.10, 'Cs_coef': 1.00},
                                     'Top Primary Member':    {'Cp_coef': 0.95, 'Cs_coef': 0.80}}
                Bp_coeffs['C'] =    {'Primary Members':       {'Cp_coef': 1.00, 'Cs_coef': 0.85},
                                     'Secondary Member 2':    {'Cp_coef': 0.70, 'Cs_coef': 0.80}}
                Bp_coeffs['D'] =    {'Primary Members':       {'Cp_coef': 1.00, 'Cs_coef': 0.85},
                                     'Secondary Member 1':    {'Cp_coef': 0.35, 'Cs_coef': 0.95}}
                Bp_coeffs['E'] =    {'Bottom Primary Member': {'Cp_coef': 1.20, 'Cs_coef': 1.05},
                                     'Secondary Member 1':    {'Cp_coef': 0.35, 'Cs_coef': 0.95},
                                     'Top Primary Member':    {'Cp_coef': 1.00, 'Cs_coef': 0.80}}
                Bp_coeffs['F'] =    {'Bottom Primary Member': {'Cp_coef': 0.65, 'Cs_coef': 0.95},
                                     'Secondary Member 2':    {'Cp_coef': 0.35, 'Cs_coef': 0.95}}
                
                Cp_coef = Bp_coeffs[case][title]['Cp_coef']
                Cs_coef = Bp_coeffs[case][title]['Cs_coef']
                Bp_max = 1/(1-Cp_coef*Cp-Cs_coef*Cs)
                
                Bp_eqn_list = []
                for zw_over_zh in zw_over_zh_list:
                    if case == 'Flat':
                        Pw = 1
                    
                    elif case == 'A':
                        if zw_over_zh <= 0.2:
                            Pw = 1/Bp_max
                        else:
                            Pw = 1/Bp_max + (1-1/Bp_max)*(zw_over_zh-0.2)/0.6
                            if Pw > 1:
                                Pw = 1
                    
                    elif case == 'B':
                        Pw = 1/Bp_max + (1-1/Bp_max)*(zw_over_zh)/0.85
                        if Pw > 1:
                            Pw = 1
                    
                    elif case == 'C' or case == 'D':
                        if title == 'Primary Members':
                            Bp_stiff = 1/(1-0.001-0.85*Cs)
                            Pw = Bp_stiff/Bp_max + (1-Bp_stiff/Bp_max)*(zw_over_zh)/0.85
                            if Pw > 1:
                                Pw = 1
                        if title == 'Secondary Member 2' or title == 'Secondary Member 1':
                            Pw = 1

                    elif case == 'E':
                        if title == 'Top Primary Member':
                            if zw_over_zh <= 0.25:
                                Pw = 1/Bp_max
                            else:
                                Pw = 1/Bp_max + (1-1/Bp_max)*(zw_over_zh-0.25)/0.9
                                if Pw > 1:
                                    Pw = 1
                        elif title == 'Bottom Primary Member':
                            if zw_over_zh <= 0.2:
                                Pw = 1/Bp_max
                            else:
                                Pw = 1/Bp_max + (1-1/Bp_max)*(zw_over_zh-0.2)/0.65
                                if Pw > 1:
                                    Pw = 1
                        elif title == 'Secondary Member 1':
                            Pw = 1
                    
                    elif case == 'F':
                        if title == 'Bottom Primary Member':
                            Bp_stiff = 1/(1-0.65*0.001-0.95*Cs)
                            Pw = Bp_stiff/Bp_max + (1-Bp_stiff/Bp_max)*(zw_over_zh)/0.6
                            if Pw > 1:
                                Pw = 1
                        elif title == 'Secondary Member 2':
                            Pw = 1
                    
                    Bp_eqn_list.append(Pw*Bp_max)

                active_Bp_equation_line = plt.plot(zw_over_zh_list,Bp_eqn_list,'--', color=color_list[iCp])

            plt.title(f'Case {case} --- $C_s$ = {Cs} --- {title}', fontsize = 8)
            plt.xlabel('$z_w/z_h$', fontsize = 8)
            plt.xticks(fontsize = 8)
            plt.xlim([0,max(zw_over_zh_list)])
            plt.ylabel('Amplification Factor, $B_p$', fontsize = 8)
            plt.yticks(fontsize = 8)
            plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.2), fontsize = 6, ncol = 4)      
            plt.savefig(save_folder / f'Case_{case}_Cs_{Cs}_{title[0]}_Plot.png', dpi=300)           
            plt.close(fig)


# Run equation generator
Cs_list = [0.001, 0.1, 0.2, 0.3]
Cp_list = [0.001, 0.1, 0.2, 0.3]
zw_over_zh_list = [0.001,0.05,0.10,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,
                    0.55,0.60,0.65,0.70,0.75,0.80,0.85,0.90,1.00,1.05,1.10,
                    1.15,1.20,1.25,1.30,1.35,1.40,1.45,1.50]

cases = ['Flat','A','B','C','D','E','F']
for case in cases:
    two_way_plot(case, Cs_list, Cp_list, zw_over_zh_list)
        